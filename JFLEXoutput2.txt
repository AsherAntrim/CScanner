TOKEN LISTING FOR FILE: test/test2.cm
Line	Type		Value
----------------------------------------
4   	INT         	int
4   	ID          	partition
4   	LPAREN      	(
4   	INT         	int
4   	ID          	arr
4   	LBRACK      	[
4   	RBRACK      	]
4   	COMMA       	,
4   	INT         	int
4   	ID          	low
4   	COMMA       	,
4   	INT         	int
4   	ID          	high
4   	RPAREN      	)
4   	LBRACE      	{
5   	INT         	int
5   	ID          	pivot
5   	SEMI        	;
6   	INT         	int
6   	ID          	i
6   	SEMI        	;
7   	INT         	int
7   	ID          	j
7   	SEMI        	;
8   	INT         	int
8   	ID          	temp
8   	SEMI        	;
10  	ID          	pivot
10  	ASSIGN      	=
10  	ID          	arr
10  	LBRACK      	[
10  	ID          	high
10  	RBRACK      	]
10  	SEMI        	;
11  	ID          	i
11  	ASSIGN      	=
11  	ID          	low
11  	MINUS       	-
11  	NUM         	1
11  	SEMI        	;
13  	ID          	j
13  	ASSIGN      	=
13  	ID          	low
13  	SEMI        	;
14  	WHILE       	while
14  	LPAREN      	(
14  	ID          	j
14  	LT          	<
14  	ID          	high
14  	RPAREN      	)
14  	LBRACE      	{
15  	IF          	if
15  	LPAREN      	(
15  	ID          	arr
15  	LBRACK      	[
15  	ID          	j
15  	RBRACK      	]
15  	LTE         	<=
15  	ID          	pivot
15  	RPAREN      	)
15  	LBRACE      	{
16  	ID          	i
16  	ASSIGN      	=
16  	ID          	i
16  	PLUS        	+
16  	NUM         	1
16  	SEMI        	;
17  	ID          	temp
17  	ASSIGN      	=
17  	ID          	arr
17  	LBRACK      	[
17  	ID          	i
17  	RBRACK      	]
17  	SEMI        	;
18  	ID          	arr
18  	LBRACK      	[
18  	ID          	i
18  	RBRACK      	]
18  	ASSIGN      	=
18  	ID          	arr
18  	LBRACK      	[
18  	ID          	j
18  	RBRACK      	]
18  	SEMI        	;
19  	ID          	arr
19  	LBRACK      	[
19  	ID          	j
19  	RBRACK      	]
19  	ASSIGN      	=
19  	ID          	temp
19  	SEMI        	;
20  	RBRACE      	}
21  	ID          	j
21  	ASSIGN      	=
21  	ID          	j
21  	PLUS        	+
21  	NUM         	1
21  	SEMI        	;
22  	RBRACE      	}
24  	ID          	temp
24  	ASSIGN      	=
24  	ID          	arr
24  	LBRACK      	[
24  	ID          	i
24  	PLUS        	+
24  	NUM         	1
24  	RBRACK      	]
24  	SEMI        	;
25  	ID          	arr
25  	LBRACK      	[
25  	ID          	i
25  	PLUS        	+
25  	NUM         	1
25  	RBRACK      	]
25  	ASSIGN      	=
25  	ID          	arr
25  	LBRACK      	[
25  	ID          	high
25  	RBRACK      	]
25  	SEMI        	;
26  	ID          	arr
26  	LBRACK      	[
26  	ID          	high
26  	RBRACK      	]
26  	ASSIGN      	=
26  	ID          	temp
26  	SEMI        	;
28  	RETURN      	return
28  	ID          	i
28  	PLUS        	+
28  	NUM         	1
28  	SEMI        	;
29  	RBRACE      	}
31  	VOID        	void
31  	ID          	quickSort
31  	LPAREN      	(
31  	INT         	int
31  	ID          	arr
31  	LBRACK      	[
31  	RBRACK      	]
31  	COMMA       	,
31  	INT         	int
31  	ID          	low
31  	COMMA       	,
31  	INT         	int
31  	ID          	high
31  	RPAREN      	)
31  	LBRACE      	{
32  	INT         	int
32  	ID          	pi
32  	SEMI        	;
34  	IF          	if
34  	LPAREN      	(
34  	ID          	low
34  	LT          	<
34  	ID          	high
34  	RPAREN      	)
34  	LBRACE      	{
35  	ID          	pi
35  	ASSIGN      	=
35  	ID          	partition
35  	LPAREN      	(
35  	ID          	arr
35  	COMMA       	,
35  	ID          	low
35  	COMMA       	,
35  	ID          	high
35  	RPAREN      	)
35  	SEMI        	;
36  	ID          	quickSort
36  	LPAREN      	(
36  	ID          	arr
36  	COMMA       	,
36  	ID          	low
36  	COMMA       	,
36  	ID          	pi
36  	MINUS       	-
36  	NUM         	1
36  	RPAREN      	)
36  	SEMI        	;
37  	ID          	quickSort
37  	LPAREN      	(
37  	ID          	arr
37  	COMMA       	,
37  	ID          	pi
37  	PLUS        	+
37  	NUM         	1
37  	COMMA       	,
37  	ID          	high
37  	RPAREN      	)
37  	SEMI        	;
38  	RBRACE      	}
39  	RBRACE      	}
41  	VOID        	void
41  	ID          	main
41  	LPAREN      	(
41  	VOID        	void
41  	RPAREN      	)
41  	LBRACE      	{
42  	INT         	int
42  	ID          	arr
42  	LBRACK      	[
42  	NUM         	10
42  	RBRACK      	]
42  	SEMI        	;
43  	INT         	int
43  	ID          	n
43  	SEMI        	;
44  	INT         	int
44  	ID          	i
44  	SEMI        	;
47  	ID          	n
47  	ASSIGN      	=
47  	NUM         	10
47  	SEMI        	;
48  	ID          	arr
48  	LBRACK      	[
48  	NUM         	0
48  	RBRACK      	]
48  	ASSIGN      	=
48  	NUM         	64
48  	SEMI        	;
49  	ID          	arr
49  	LBRACK      	[
49  	NUM         	1
49  	RBRACK      	]
49  	ASSIGN      	=
49  	NUM         	34
49  	SEMI        	;
50  	ID          	arr
50  	LBRACK      	[
50  	NUM         	2
50  	RBRACK      	]
50  	ASSIGN      	=
50  	NUM         	25
50  	SEMI        	;
51  	ID          	arr
51  	LBRACK      	[
51  	NUM         	3
51  	RBRACK      	]
51  	ASSIGN      	=
51  	NUM         	12
51  	SEMI        	;
52  	ID          	arr
52  	LBRACK      	[
52  	NUM         	4
52  	RBRACK      	]
52  	ASSIGN      	=
52  	NUM         	22
52  	SEMI        	;
53  	ID          	arr
53  	LBRACK      	[
53  	NUM         	5
53  	RBRACK      	]
53  	ASSIGN      	=
53  	NUM         	11
53  	SEMI        	;
54  	ID          	arr
54  	LBRACK      	[
54  	NUM         	6
54  	RBRACK      	]
54  	ASSIGN      	=
54  	NUM         	90
54  	SEMI        	;
55  	ID          	arr
55  	LBRACK      	[
55  	NUM         	7
55  	RBRACK      	]
55  	ASSIGN      	=
55  	NUM         	87
55  	SEMI        	;
56  	ID          	arr
56  	LBRACK      	[
56  	NUM         	8
56  	RBRACK      	]
56  	ASSIGN      	=
56  	NUM         	45
56  	SEMI        	;
57  	ID          	arr
57  	LBRACK      	[
57  	NUM         	9
57  	RBRACK      	]
57  	ASSIGN      	=
57  	NUM         	3
57  	SEMI        	;
59  	ID          	quickSort
59  	LPAREN      	(
59  	ID          	arr
59  	COMMA       	,
59  	NUM         	0
59  	COMMA       	,
59  	ID          	n
59  	MINUS       	-
59  	NUM         	1
59  	RPAREN      	)
59  	SEMI        	;
61  	RETURN      	return
61  	SEMI        	;
62  	RBRACE      	}
62  	ENDFILE     	

Scanning completed successfully.

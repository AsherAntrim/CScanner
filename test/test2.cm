/* test2.c - QuickSort Implementation */
/* Tests real-world usage */

int partition(int arr[], int low, int high) {
    int pivot;
    int i;
    int j;
    int temp;
    
    pivot = arr[high];
    i = low - 1;
    
    j = low;
    while (j < high) {
        if (arr[j] <= pivot) {
            i = i + 1;
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
        j = j + 1;
    }
    
    temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    
    return i + 1;
}

void quickSort(int arr[], int low, int high) {
    int pi;
    
    if (low < high) {
        pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void main(void) {
    int arr[10];
    int n;
    int i;
    
    /* Initialize array */
    n = 10;
    arr[0] = 64;
    arr[1] = 34;
    arr[2] = 25;
    arr[3] = 12;
    arr[4] = 22;
    arr[5] = 11;
    arr[6] = 90;
    arr[7] = 87;
    arr[8] = 45;
    arr[9] = 3;
    
    quickSort(arr, 0, n - 1);
    
    return;
}
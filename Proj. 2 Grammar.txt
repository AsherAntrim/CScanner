program → declaration-list									---
declaration-list → declaration {declaration}							EBNF
declaration → var-declaration | fun-declaration							---
var-declaration → type-specifier ID ([ NUM ] | ε) ;						Left Factoring
type-specifier → int | void									---
fun-declaration → type-specifier ID ( params ) compound-stmt					---
params → param-list | void									---
param-list → param {, param}									EBNF
param → type-specifier ID | type-specifier ID [ ]						---
compound-stmt → { local-declarations statement-list }						---
local-declarations → {var-declaration}								EBNF
statement-list → {statement}									EBNF
statement → expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt	---
expression-stmt → expression ; | ;								---
selection-stmt → if ( expression ) statement [else statement]					Left Factoring
iteration-stmt → while ( expression ) statement							---
return-stmt → return ; | return expression ;							---
expression → var = expression | simple-expression						---
var → ID [[ expression ]]									Left Factoring
simple-expression → additive-expression relop additive-expression | additive-expression		---
relop → <= | < | > | >= | == | !=								---
additive-expression → term {addop term}								EBNF
addop → + | -											---
term → factor {mulop factor}									EBNF
mulop → * | /											---
factor → ( expression ) | var | call | NUM							---
call → ID ( args )										---
args → arg-list | ε										---
arg-list → expression {, expression}								EBNF	